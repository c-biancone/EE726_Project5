%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 38 360 322
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%%DocumentFonts:Courier
%******************************************************************************
%
% The preview image should preceed this file if a preview is being generated.
%
% This should be the first line: %!PS-Adobe-2.0 EPSF-1.2
% There should also be a BBox:   %%BoundingBox:0 0 300 300
%
% Cadence Design Systems -- Supports Both Level 1 and Level 2 Printers
%
% EPS Prologue -- Version 97B (aka 9702)
%
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
/gis  {
  0 setgray
  mark
  save
  newpath

  72 resolution div
  dup
  scale

  /stippleArray 10 array def
    stippleArray
     dup    0  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
	        08080404020201018080404020201010> put
	    9  <08081414222241418080414122221414
		08081414222241418080414122221414> put



  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
     /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put

    /BuildChar {
        /char exch def
        /fontdict exch def
	/charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 6 dict def
  xformdict /xformmtrx matrix put

  /rt 0 def
  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet 0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

  gsave

  } def

/cdsLevel2 /languagelevel where {pop languagelevel} {1} ifelse 2 ge def

/cdsColor cdsLevel2 not {
                          false
                          /colorimage where {pop pop true} if
                        } {
	                  true
                        } ifelse
def

/gfs  {
    grestore
    showpage
    restore
    cleartomark
  } def
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def

  } bind def
/rotp  {
  /rt 90 def
  grestore
} def
/clwin  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    rt 90 eq
      {
        pageWidth 0 translate
        rt rotate
	/rt 0 def
	gsave
      } if

    grestore
    gsave
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
    newpath
} def
/bblineto {
  dup dup   /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} def
/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} def
/ellipse
  { ellipsedict begin
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    /savematrix mtrx currentmatrix def
    x y translate
    xrad yrad scale
    0 0 1 startangle endangle arc
    savematrix setmatrix
    end
  } def
/dls  {
  gsave
  newpath
  moveto
  rlineto
  setLineColor
  stroke
  grestore
} def
/dlt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dslt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dlv  {
  rlineto
} def
/dle  {
  stroke
  grestore
} def
/mps {
  newpath
  moveto
} def
/dbu  {
    setLineColor
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } def
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    gsave
      newpath
      x1 y1 bbmoveto
      x2 y1 bblineto
      x2 y2 bblineto
      x1 y2 bblineto
      closepath
      clip fillpath
    grestore
  } def

/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
      newpath
      x1 y1 moveto
      x2 y1 lineto
      x2 y2 lineto
      x1 y2 lineto
      closepath
      gsave
      setFillColor
      fill grestore
      setLineColor stroke

} def
/dpb { gsave
      newpath bbmoveto
} def
/dpu  {
        closepath
        setLineColor
        stroke
      grestore
} def
/dpf  {
       closepath
       clip fillpath
     grestore
} def
/dps  {
       closepath
       setFillColor
       fill grestore
       setLineColor stroke
} def
/dpv  {
    bblineto
} def
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setLineColor
      stroke
    grestore
} def
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def
    gsave
      newpath
      x y radius radius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setFillColor
      fill
    grestore
    setLineColor stroke
  } def
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
      x y xradius yradius 0 360 ellipse
      gsave
      setFillColor
      stroke
    grestore
  } def
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      setFillColor fill
    grestore
    setLineColor stroke
} def
/dau  { gsave
          newpath ellipse
          setLineColor
          stroke
        grestore
} def
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
} def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
} def

/lpon  {
    /oncount exch def
    pop
    oncount
} def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
} def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth setlinewidth
} def

/sls    { pop } def

/ssls  { [] 0 setdash
          1 setlinewidth
} def
/fillpath  {
    setFillColor
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop
    hatchSet 1 eq {setLineColor stroke} if
} def

/fds  { pop /currchar 30 def} def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } def
/fde  {
    pop
  } def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } def

  /setLineColor {
    cdsLevel2 cdsColor or {
      lineRed    1000 div
      lineGreen  1000 div
      lineBlue   1000 div
      setrgbcolor } if
  } def

  /setFillColor {
    cdsLevel2 cdsColor or {
      fillRed    1000 div
      fillGreen  1000 div
      fillBlue   1000 div
      setrgbcolor }
      { 0 setgray } ifelse
  } def

  /slc {
    /lineBlue  exch def
    /lineGreen exch def
    /lineRed   exch def
    /color 1 def
    lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
      /lineBlue  0 def
      /lineGreen 0 def
      /lineRed   0 def
    } if} if} if
  } def

  /sfc {
    /fillBlue  exch def
    /fillGreen exch def
    /fillRed   exch def
    /color 1 def
    fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
      /fillBlue  0 def
      /fillGreen 0 def
      /fillRed   0 def
    } if} if} if
  } def

%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%*****************************
%
% End of Cadence eps.prologue
%
%*****************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
 5997 6000 1200 pap
%%Page: cds 1
gis
0 637 5991 5363 clwin
0 637 5997 5360 clwin
0 637 5997 5360 clwin
ssls
0 -88 2347 3723 dls
2347 3686 dlt
6 18 dlv
13 13 dlv
12 6 dlv
19 0 dlv
dle
2498 3704 dlt
-12 13 dlv
-13 6 dlv
-19 0 dlv
-13 -6 dlv
-12 -13 dlv
-7 -18 dlv
0 -13 dlv
7 -19 dlv
12 -13 dlv
13 -6 dlv
19 0 dlv
13 6 dlv
12 13 dlv
dle
113 0 2644 3711 dls
113 0 2644 3673 dls
2922 3742 dlt
12 7 dlv
19 19 dlv
0 -133 dlv
dle
3023 3648 dlt
-7 -7 dlv
7 -6 dlv
6 6 dlv
-6 7 dlv
dle
3111 3768 dlt
-19 -7 dlv
-12 -19 dlv
-7 -31 dlv
0 -19 dlv
7 -32 dlv
12 -19 dlv
19 -6 dlv
13 0 dlv
19 6 dlv
12 19 dlv
7 32 dlv
0 19 dlv
-7 31 dlv
-12 19 dlv
-19 7 dlv
-13 0 dlv
dle
-89 -133 3162 3768 dls
0 -89 2426 3989 dls
2426 3951 dlt
7 19 dlv
12 12 dlv
13 7 dlv
19 0 dlv
dle
2534 3989 dlt
-13 -7 dlv
-13 -12 dlv
-6 -19 dlv
0 -13 dlv
6 -19 dlv
13 -12 dlv
13 -7 dlv
19 0 dlv
12 7 dlv
13 12 dlv
6 19 dlv
0 13 dlv
-6 19 dlv
-13 12 dlv
-12 7 dlv
-19 0 dlv
dle
114 0 2729 3976 dls
114 0 2729 3938 dls
3007 4008 dlt
13 6 dlv
19 19 dlv
0 -133 dlv
dle
0 -133 3128 4033 dls
89 0 3083 4033 dls
2228 4254 dlt
38 -88 dlv
38 88 dlv
dle
2348 4298 dlt
0 -107 dlv
6 -19 dlv
13 -6 dlv
12 0 dlv
dle
44 0 2329 4254 dls
2417 4267 dlt
0 6 dlv
7 13 dlv
6 6 dlv
13 6 dlv
25 0 dlv
13 -6 dlv
6 -6 dlv
6 -13 dlv
0 -13 dlv
-6 -12 dlv
-13 -19 dlv
-63 -63 dlv
89 0 dlv
dle
114 0 2645 4242 dls
114 0 2645 4204 dls
2923 4273 dlt
12 6 dlv
19 19 dlv
0 -132 dlv
dle
3024 4178 dlt
-6 -6 dlv
6 -6 dlv
6 6 dlv
-6 6 dlv
dle
3150 4298 dlt
-63 0 dlv
-6 -56 dlv
6 6 dlv
19 6 dlv
19 0 dlv
19 -6 dlv
13 -13 dlv
6 -19 dlv
0 -12 dlv
-6 -19 dlv
-13 -13 dlv
-19 -6 dlv
-19 0 dlv
-19 6 dlv
-6 6 dlv
-7 13 dlv
dle
1976 4520 dlt
38 -89 dlv
38 89 dlv
dle
2096 4564 dlt
0 -108 dlv
6 -19 dlv
13 -6 dlv
12 0 dlv
dle
44 0 2077 4520 dls
2178 4538 dlt
13 7 dlv
19 19 dlv
0 -133 dlv
dle
114 0 2374 4507 dls
114 0 2374 4469 dls
2709 4564 dlt
-64 0 dlv
-6 -57 dlv
6 6 dlv
19 7 dlv
19 0 dlv
19 -7 dlv
13 -12 dlv
6 -19 dlv
0 -13 dlv
-6 -19 dlv
-13 -13 dlv
-19 -6 dlv
-19 0 dlv
-19 6 dlv
-6 7 dlv
-6 12 dlv
dle
2797 4564 dlt
-19 -7 dlv
-13 -19 dlv
-6 -31 dlv
0 -19 dlv
6 -32 dlv
13 -19 dlv
19 -6 dlv
13 0 dlv
19 6 dlv
12 19 dlv
7 32 dlv
0 19 dlv
-7 31 dlv
-12 19 dlv
-19 7 dlv
-13 0 dlv
dle
-89 -133 2848 4564 dls
2923 4564 dlt
-19 -7 dlv
-12 -19 dlv
-6 -31 dlv
0 -19 dlv
6 -32 dlv
12 -19 dlv
19 -6 dlv
13 0 dlv
19 6 dlv
13 19 dlv
6 32 dlv
0 19 dlv
-6 31 dlv
-13 19 dlv
-19 7 dlv
-13 0 dlv
dle
-88 -133 2974 4564 dls
0 -89 3018 4520 dls
3018 4494 dlt
19 19 dlv
13 7 dlv
19 0 dlv
12 -7 dlv
7 -19 dlv
0 -63 dlv
dle
3088 4494 dlt
19 19 dlv
12 7 dlv
19 0 dlv
13 -7 dlv
6 -19 dlv
0 -63 dlv
dle
20 0 2385 3476 dls
0 -106 2395 3476 dls
20 0 2385 3370 dls
2460 3476 dlt
-15 -5 dlv
-10 -15 dlv
-5 -26 dlv
0 -15 dlv
5 -25 dlv
10 -15 dlv
15 -5 dlv
10 0 dlv
16 5 dlv
10 15 dlv
5 25 dlv
0 15 dlv
-5 26 dlv
-10 15 dlv
-16 5 dlv
-10 0 dlv
dle
-71 -106 2501 3476 dls
1074 981 dpb
955 1101 dpv
796 1101 dpv
676 981 dpv
796 862 dpv
955 862 dpv
dpu
5054 2043 dpb
5174 1923 dpv
5333 1923 dpv
5453 2043 dpv
5333 2162 dpv
5174 2162 dpv
dpu
676 3516 dpb
676 3754 dpv
822 3754 dpv
942 3635 dpv
822 3516 dpv
dpu
5054 4166 dpb
4935 4285 dpv
4776 4285 dpv
4656 4166 dpv
4776 4046 dpv
4935 4046 dpv
dpu
1074 5227 dpb
955 5347 dpv
796 5347 dpv
676 5227 dpv
796 5108 dpv
955 5108 dpv
dpu
1472 981 dlt
398 0 dlv
dle
1870 849 dlt
266 265 dlv
dle
1870 1114 dlt
266 -265 dlv
dle
265 266 1870 849 dbu
-133 265 3330 2972 dls
0 -266 3197 2972 dls
0 -265 3197 3502 dls
2998 2905 dlt
40 14 dlv
26 26 dlv
0 53 dlv
-26 27 dlv
-40 13 dlv
dle
2998 3038 dlt
40 13 dlv
26 27 dlv
0 53 dlv
-26 26 dlv
-40 14 dlv
dle
2998 3171 dlt
40 13 dlv
26 26 dlv
0 54 dlv
-26 26 dlv
-40 13 dlv
dle
2998 3303 dlt
-332 0 dlv
0 199 dlv
dle
2666 2706 dlt
0 199 dlv
332 0 dlv
dle
663 0 809 3635 dls
530 0 942 981 dls
0 1061 1472 2574 dls
1724 0 942 5227 dls
1194 0 1472 2574 dls
0 1725 2666 3502 dls
0 132 2666 2574 dls
0 663 3197 2043 dls
0 664 3197 3502 dls
1857 0 3197 4166 dls
2123 0 3197 2043 dls
231 1048 dlt
51 -133 dlv
50 133 dlv
dle
446 1029 dlt
-12 12 dlv
-19 7 dlv
-26 0 dlv
-19 -7 dlv
-12 -12 dlv
0 -13 dlv
6 -12 dlv
6 -7 dlv
13 -6 dlv
38 -13 dlv
13 -6 dlv
6 -6 dlv
6 -13 dlv
0 -19 dlv
-12 -13 dlv
-19 -6 dlv
-26 0 dlv
-19 6 dlv
-12 13 dlv
dle
573 1029 dlt
-13 12 dlv
-19 7 dlv
-25 0 dlv
-19 -7 dlv
-13 -12 dlv
0 -13 dlv
6 -12 dlv
7 -7 dlv
12 -6 dlv
38 -13 dlv
13 -6 dlv
6 -6 dlv
7 -13 dlv
0 -19 dlv
-13 -13 dlv
-19 -6 dlv
-25 0 dlv
-19 6 dlv
-13 13 dlv
dle
88 -132 5538 2109 dls
-88 -132 5626 2109 dls
107 3682 dlt
-13 13 dlv
-19 6 dlv
-25 0 dlv
-19 -6 dlv
-13 -13 dlv
0 -12 dlv
7 -13 dlv
6 -6 dlv
13 -7 dlv
38 -12 dlv
12 -6 dlv
7 -7 dlv
6 -12 dlv
0 -19 dlv
-13 -13 dlv
-19 -6 dlv
-25 0 dlv
-19 6 dlv
-13 13 dlv
dle
138 3701 dlt
32 -132 dlv
32 132 dlv
31 -132 dlv
32 132 dlv
dle
101 0 284 3556 dls
429 3569 dlt
0 132 dlv
57 0 dlv
19 -6 dlv
6 -6 dlv
7 -13 dlv
0 -19 dlv
-7 -13 dlv
-6 -6 dlv
-19 -6 dlv
-57 0 dlv
dle
4464 4232 dlt
50 -63 dlv
0 -70 dlv
dle
-51 -63 4565 4232 dls
218 5293 dlt
51 -132 dlv
50 132 dlv
dle
351 5161 dlt
0 132 dlv
44 0 dlv
19 -6 dlv
13 -12 dlv
6 -13 dlv
6 -19 dlv
0 -32 dlv
-6 -19 dlv
-6 -12 dlv
-13 -13 dlv
-19 -6 dlv
-44 0 dlv
dle
483 5161 dlt
0 132 dlv
45 0 dlv
19 -6 dlv
12 -12 dlv
7 -13 dlv
6 -19 dlv
0 -32 dlv
-6 -19 dlv
-7 -12 dlv
-12 -13 dlv
-19 -6 dlv
-45 0 dlv
dle
1074 981 dpb
955 862 dpv
796 862 dpv
676 981 dpv
796 1101 dpv
955 1101 dpv
dps
1419 928 1525 1035 dbs
5054 2043 dpb
5174 2162 dpv
5333 2162 dpv
5453 2043 dpv
5333 1923 dpv
5174 1923 dpv
dps
3250 2759 dpb
3144 2759 dpv
3144 2653 dpv
3250 2653 dpv
dps
3250 3555 dpb
3144 3555 dpv
3144 3449 dpv
3250 3449 dpv
dps
2719 2759 dpb
2613 2759 dpv
2613 2653 dpv
2719 2653 dpv
dps
2719 3555 dpb
2613 3555 dpv
2613 3449 dpv
2719 3449 dpv
dps
676 3516 dpb
676 3754 dpv
822 3754 dpv
942 3635 dpv
822 3516 dpv
dps
5054 4166 dpb
4935 4046 dpv
4776 4046 dpv
4656 4166 dpv
4776 4285 dpv
4935 4285 dpv
dps
1074 5227 dpb
955 5108 dpv
796 5108 dpv
676 5227 dpv
796 5347 dpv
955 5347 dpv
dps
0 637 5997 5363 clwin
gfs
%%Trailer
%%EOF
